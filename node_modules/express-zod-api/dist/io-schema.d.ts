import { z } from "zod";
import { AnyMiddlewareDef } from "./middleware";
type UnknownKeysParam = "passthrough" | "strict" | "strip";
type Refined<T extends z.ZodType> = T extends z.ZodType<infer O> ? z.ZodEffects<T | Refined<T>, O, O> : never;
/**
 * @desc The type allowed on the top level of Middlewares and Endpoints
 * @param U â€” only "strip" is allowed for Middlewares due to intersection issue (Zod) #600
 * */
export type IOSchema<U extends UnknownKeysParam = any> = z.ZodObject<any, U> | z.ZodUnion<[IOSchema<U>, ...IOSchema<U>[]]> | z.ZodIntersection<IOSchema<U>, IOSchema<U>> | z.ZodDiscriminatedUnion<string, z.Primitive, z.ZodObject<any, U>> | Refined<z.ZodObject<any, U>>;
export type ProbableIntersection<A extends IOSchema<"strip"> | null, B extends IOSchema> = A extends null ? B : A extends IOSchema<"strip"> ? z.ZodIntersection<A, B> : never;
/**
 * @description intersects input schemas of middlewares and the endpoint
 * @since 07.03.2022 former combineEndpointAndMiddlewareInputSchemas()
 */
export declare const getFinalEndpointInputSchema: <MIN extends IOSchema<"strip"> | null, IN extends IOSchema<any>>(middlewares: AnyMiddlewareDef[], input: IN) => ProbableIntersection<MIN, IN>;
export {};
