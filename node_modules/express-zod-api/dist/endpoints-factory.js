"use strict";
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _a, _EndpointsFactory_create;
Object.defineProperty(exports, "__esModule", { value: true });
exports.defaultEndpointsFactory = exports.EndpointsFactory = void 0;
const zod_1 = require("zod");
const common_helpers_1 = require("./common-helpers");
const endpoint_1 = require("./endpoint");
const io_schema_1 = require("./io-schema");
const middleware_1 = require("./middleware");
const mime_1 = require("./mime");
const result_handler_1 = require("./result-handler");
class EndpointsFactory {
    constructor(subject) {
        this.middlewares = [];
        this.use = this.addExpressMiddleware;
        this.resultHandler =
            "resultHandler" in subject ? subject.resultHandler : subject;
    }
    addMiddleware(subject) {
        return __classPrivateFieldGet(EndpointsFactory, _a, "m", _EndpointsFactory_create).call(EndpointsFactory, this.middlewares.concat(subject), this.resultHandler);
    }
    addExpressMiddleware(middleware, features) {
        const transformer = features?.transformer || ((err) => err);
        const provider = features?.provider || (() => ({}));
        const definition = {
            type: "express",
            input: zod_1.z.object({}),
            middleware: async ({ request, response }) => new Promise((resolve, reject) => {
                const next = (err) => {
                    if (err && err instanceof Error) {
                        return reject(transformer(err));
                    }
                    resolve(provider(request, response));
                };
                middleware(request, response, next);
            }),
        };
        return __classPrivateFieldGet(EndpointsFactory, _a, "m", _EndpointsFactory_create).call(EndpointsFactory, this.middlewares.concat(definition), this.resultHandler);
    }
    addOptions(options) {
        return __classPrivateFieldGet(EndpointsFactory, _a, "m", _EndpointsFactory_create).call(EndpointsFactory, this.middlewares.concat((0, middleware_1.createMiddleware)({
            input: zod_1.z.object({}),
            middleware: async () => options,
        })), this.resultHandler);
    }
    build({ input, handler, output: outputSchema, ...rest }) {
        const { middlewares, resultHandler } = this;
        return new endpoint_1.Endpoint({
            handler,
            middlewares,
            outputSchema,
            resultHandler,
            inputSchema: (0, io_schema_1.getFinalEndpointInputSchema)(middlewares, input),
            mimeTypes: (0, common_helpers_1.hasUpload)(input) ? [mime_1.mimeMultipart] : [mime_1.mimeJson],
            ...rest,
        });
    }
}
exports.EndpointsFactory = EndpointsFactory;
_a = EndpointsFactory, _EndpointsFactory_create = function _EndpointsFactory_create(middlewares, resultHandler) {
    const factory = new EndpointsFactory(resultHandler);
    factory.middlewares = middlewares;
    return factory;
};
exports.defaultEndpointsFactory = new EndpointsFactory(result_handler_1.defaultResultHandler);
//# sourceMappingURL=endpoints-factory.js.map