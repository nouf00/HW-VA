"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.copyMeta = exports.getMeta = exports.hasMeta = exports.withMeta = exports.metaProp = void 0;
const common_helpers_1 = require("./common-helpers");
const ramda_1 = require("ramda");
exports.metaProp = "expressZodApiMeta";
const withMeta = (schema) => {
    const def = schema._def;
    def[exports.metaProp] = def[exports.metaProp] || { examples: [] };
    if (!("example" in schema)) {
        Object.defineProperties(schema, {
            example: {
                get: () => (value) => {
                    def[exports.metaProp].examples.push(value);
                    return schema;
                },
            },
        });
    }
    return schema;
};
exports.withMeta = withMeta;
const hasMeta = (schema) => {
    if (!(exports.metaProp in schema._def)) {
        return false;
    }
    return (typeof schema._def[exports.metaProp] === "object" && schema._def[exports.metaProp] !== null);
};
exports.hasMeta = hasMeta;
function getMeta(schema, meta) {
    if (!(0, exports.hasMeta)(schema)) {
        return undefined;
    }
    const def = schema._def;
    return meta in def[exports.metaProp] ? def[exports.metaProp][meta] : undefined;
}
exports.getMeta = getMeta;
const copyMeta = (src, dest) => {
    if (!(0, exports.hasMeta)(src)) {
        return dest;
    }
    dest = (0, exports.withMeta)(dest);
    const def = dest._def;
    const examplesCombinations = (0, common_helpers_1.combinations)(def[exports.metaProp].examples, src._def[exports.metaProp].examples);
    // general deep merge except examples
    def[exports.metaProp] = (0, ramda_1.mergeDeepRight)({ ...def[exports.metaProp], examples: [] }, { ...src._def[exports.metaProp], examples: [] });
    if (examplesCombinations.type === "single") {
        def[exports.metaProp].examples = examplesCombinations.value;
    }
    else {
        for (const [destExample, srcExample] of examplesCombinations.value) {
            def[exports.metaProp].examples.push((0, ramda_1.mergeDeepRight)({ ...destExample }, { ...srcExample }));
        }
    }
    return dest;
};
exports.copyMeta = copyMeta;
//# sourceMappingURL=metadata.js.map