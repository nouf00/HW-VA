import ts from "typescript";
export declare const f: ts.NodeFactory;
export declare const exportModifier: ts.ModifierToken<ts.SyntaxKind.ExportKeyword>[];
export declare const publicReadonlyModifier: (ts.ModifierToken<ts.SyntaxKind.PublicKeyword> | ts.ModifierToken<ts.SyntaxKind.ReadonlyKeyword>)[];
export declare const protectedReadonlyModifier: (ts.ModifierToken<ts.SyntaxKind.ReadonlyKeyword> | ts.ModifierToken<ts.SyntaxKind.ProtectedKeyword>)[];
export declare const makeTemplate: (names: (ts.Identifier | string)[]) => ts.TemplateLiteralTypeNode;
export declare const parametricIndexNode: ts.TemplateLiteralTypeNode;
export declare const makeParam: (name: string, type?: ts.TypeNode, mod?: ts.Modifier[]) => ts.ParameterDeclaration;
export declare const makeParams: (params: Record<string, ts.TypeNode | undefined>, mod?: ts.Modifier[]) => ts.ParameterDeclaration[];
export declare const makeRecord: (key: ts.Identifier | ts.KeywordTypeSyntaxKind, value: ts.KeywordTypeSyntaxKind) => ts.ExpressionWithTypeArguments;
export declare const makeEmptyInitializingConstructor: (params: ts.ParameterDeclaration[]) => ts.ConstructorDeclaration;
export declare const makeQuotedProp: (name: string, ref: string) => ts.PropertySignature;
export declare const makeConst: (name: string, value: ts.Expression) => ts.VariableDeclarationList;
export declare const makePublicLiteralType: (name: string, literals: string[]) => ts.TypeAliasDeclaration;
export declare const makePublicType: (name: string, value: ts.TypeNode) => ts.TypeAliasDeclaration;
export declare const makePublicReadonlyProp: (name: string, type: ts.TypeNode, exp: ts.Expression) => ts.PropertyDeclaration;
export declare const makePublicClass: (name: string, constructor: ts.ConstructorDeclaration, props?: ts.PropertyDeclaration[]) => ts.ClassDeclaration;
export declare const makeIndexedPromise: (type: ts.Identifier, index: ts.TypeNode) => ts.TypeReferenceNode;
export declare const makeAnyPromise: () => ts.TypeReferenceNode;
export declare const makePublicExtendedInterface: (name: string, extender: ts.HeritageClause[], props: ts.PropertySignature[]) => ts.InterfaceDeclaration;
export declare const makeTypeParams: (params: Record<string, ts.Identifier>) => ts.TypeParameterDeclaration[];
export declare const makeImplementationCallFn: (params: string[], args: ts.Expression[]) => ts.ArrowFunction;
export declare const makeObjectKeysReducer: (obj: string, exp: ts.Expression, initial: ts.Expression) => ts.CallExpression;
export declare const cleanId: (path: string, method: string, suffix: string) => string;
