"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createServer = exports.attachRouting = exports.createNotFoundHandler = exports.createParserFailureHandler = void 0;
const express_1 = __importStar(require("express"));
const compression_1 = __importDefault(require("compression"));
const express_fileupload_1 = __importDefault(require("express-fileupload"));
const https_1 = __importDefault(require("https"));
const errors_1 = require("./errors");
const common_helpers_1 = require("./common-helpers");
const logger_1 = require("./logger");
const result_handler_1 = require("./result-handler");
const routing_1 = require("./routing");
const http_errors_1 = __importDefault(require("http-errors"));
const createParserFailureHandler = (errorHandler, logger) => (error, request, response, next) => {
    if (!error) {
        return next();
    }
    errorHandler.handler({
        error,
        request,
        response,
        logger,
        input: request.body,
        output: null,
    });
};
exports.createParserFailureHandler = createParserFailureHandler;
const createNotFoundHandler = (errorHandler, logger) => (request, response) => {
    const error = (0, http_errors_1.default)(404, `Can not ${request.method} ${request.path}`);
    try {
        errorHandler.handler({
            request,
            response,
            logger,
            error,
            input: null,
            output: null,
        });
    }
    catch (e) {
        (0, result_handler_1.lastResortHandler)({
            response,
            logger,
            error: new errors_1.ResultHandlerError((0, common_helpers_1.makeErrorFromAnything)(e).message, error),
        });
    }
};
exports.createNotFoundHandler = createNotFoundHandler;
function attachRouting(config, routing) {
    const logger = (0, common_helpers_1.isLoggerConfig)(config.logger)
        ? (0, logger_1.createLogger)(config.logger)
        : config.logger;
    (0, routing_1.initRouting)({ app: config.app, routing, logger, config });
    const errorHandler = config.errorHandler || result_handler_1.defaultResultHandler;
    const notFoundHandler = (0, exports.createNotFoundHandler)(errorHandler, logger);
    return { notFoundHandler, logger };
}
exports.attachRouting = attachRouting;
function createServer(config, routing) {
    const logger = (0, common_helpers_1.isLoggerConfig)(config.logger)
        ? (0, logger_1.createLogger)(config.logger)
        : config.logger;
    const app = (0, express_1.default)();
    app.disable("x-powered-by");
    const errorHandler = config.errorHandler || result_handler_1.defaultResultHandler;
    const compressor = config.server.compression
        ? (0, compression_1.default)({
            ...(typeof config.server.compression === "object"
                ? config.server.compression
                : {}),
        })
        : undefined;
    const jsonParser = config.server.jsonParser || (0, express_1.json)();
    const multipartParser = config.server.upload
        ? (0, express_fileupload_1.default)({
            ...(typeof config.server.upload === "object"
                ? config.server.upload
                : {}),
            abortOnLimit: false,
            parseNested: true,
        })
        : undefined;
    const middlewares = []
        .concat(compressor || [])
        .concat(jsonParser)
        .concat(multipartParser || []);
    app.use(middlewares);
    app.use((0, exports.createParserFailureHandler)(errorHandler, logger));
    (0, routing_1.initRouting)({ app, routing, logger, config });
    app.use((0, exports.createNotFoundHandler)(errorHandler, logger));
    const httpServer = app.listen(config.server.listen, () => {
        logger.info(`Listening ${config.server.listen}`);
    });
    let httpsServer;
    if (config.https) {
        httpsServer = https_1.default
            .createServer(config.https.options, app)
            .listen(config.https.listen, () => {
            logger.info(`Listening ${config.https.listen}`);
        });
    }
    return { app, httpServer, httpsServer, logger };
}
exports.createServer = createServer;
//# sourceMappingURL=server.js.map