/// <reference types="node" />
import compression from "compression";
import { NextHandleFunction } from "connect";
import { Express, Request } from "express";
import fileUpload from "express-fileupload";
import { ServerOptions } from "https";
import { Logger } from "winston";
import { AbstractEndpoint } from "./endpoint";
import { Method } from "./method";
import { ResultHandlerDefinition } from "./result-handler";
export declare const loggerLevels: {
    silent: boolean;
    warn: boolean;
    debug: boolean;
};
export interface LoggerConfig {
    level: keyof typeof loggerLevels;
    color: boolean;
}
type UploadOptions = Pick<fileUpload.Options, "createParentPath" | "uriDecodeFileNames" | "safeFileNames" | "preserveExtension" | "useTempFiles" | "tempFileDir" | "debug" | "uploadTimeout">;
type CompressionOptions = Pick<compression.CompressionOptions, "threshold" | "level" | "strategy" | "chunkSize" | "memLevel">;
export interface ServerConfig {
    server: {
        listen: number | string;
        jsonParser?: NextHandleFunction;
        upload?: boolean | UploadOptions;
        compression?: boolean | CompressionOptions;
    };
    https?: {
        options: ServerOptions;
        listen: number | string;
    };
}
export interface AppConfig {
    app: Express;
}
type InputSource = keyof Pick<Request, "query" | "body" | "files" | "params">;
export type InputSources = Record<Method, InputSource[]>;
type Headers = Record<string, string>;
type HeadersProvider = (params: {
    defaultHeaders: Headers;
    request: Request;
    endpoint: AbstractEndpoint;
    logger: Logger;
}) => Headers | Promise<Headers>;
export type TagsConfig<TAG extends string> = Record<TAG, string | {
    description: string;
    url?: string;
}>;
export interface CommonConfig<TAG extends string = string> {
    cors: boolean | HeadersProvider;
    errorHandler?: ResultHandlerDefinition<any, any>;
    logger: LoggerConfig | Logger;
    startupLogo?: boolean;
    inputSources?: Partial<InputSources>;
    tags?: TagsConfig<TAG>;
}
export declare const createConfig: <TAG extends string, T extends (AppConfig | ServerConfig) & CommonConfig<TAG>>(config: T) => T;
export {};
