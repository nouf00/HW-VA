"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ZodUpload = void 0;
const zod_1 = require("zod");
const zodUploadKind = "ZodUpload";
const isUploadedFile = (data) => typeof data === "object" &&
    data !== null &&
    "name" in data &&
    "encoding" in data &&
    "mimetype" in data &&
    "data" in data &&
    "tempFilePath" in data &&
    "truncated" in data &&
    "size" in data &&
    "md5" in data &&
    "mv" in data &&
    typeof data.name === "string" &&
    typeof data.mimetype === "string" &&
    typeof data.data === "object" &&
    typeof data.tempFilePath === "string" &&
    typeof data.truncated === "boolean" &&
    typeof data.size === "number" &&
    typeof data.md5 === "string" &&
    typeof data.mv === "function";
class ZodUpload extends zod_1.ZodType {
    _parse(input) {
        const { ctx } = this._processInputParams(input);
        if (ctx.parsedType !== zod_1.ZodParsedType.object || !isUploadedFile(ctx.data)) {
            (0, zod_1.addIssueToContext)(ctx, {
                code: zod_1.ZodIssueCode.custom,
                message: `Expected file upload, received ${ctx.parsedType}`,
            });
            return zod_1.INVALID;
        }
        return (0, zod_1.OK)(ctx.data);
    }
}
exports.ZodUpload = ZodUpload;
ZodUpload.create = () => new ZodUpload({
    typeName: zodUploadKind,
});
//# sourceMappingURL=upload-schema.js.map