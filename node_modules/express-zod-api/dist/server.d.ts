/// <reference types="qs" />
/// <reference types="node" />
/// <reference types="node" />
import express, { ErrorRequestHandler, RequestHandler } from "express";
import https from "https";
import { Logger } from "winston";
import { AppConfig, CommonConfig, ServerConfig } from "./config-type";
import { Routing } from "./routing";
export declare const createParserFailureHandler: (errorHandler: import("./result-handler").ResultHandlerDefinition<any, any>, logger: Logger) => ErrorRequestHandler;
export declare const createNotFoundHandler: (errorHandler: import("./result-handler").ResultHandlerDefinition<any, any>, logger: Logger) => RequestHandler;
export declare function attachRouting(config: AppConfig & CommonConfig, routing: Routing): {
    notFoundHandler: express.RequestHandler<import("express-serve-static-core").ParamsDictionary, any, any, import("qs").ParsedQs, Record<string, any>>;
    logger: Logger;
};
export declare function createServer(config: ServerConfig & CommonConfig, routing: Routing): {
    app: import("express-serve-static-core").Express;
    httpServer: import("http").Server<typeof import("http").IncomingMessage, typeof import("http").ServerResponse>;
    httpsServer: https.Server<typeof import("http").IncomingMessage, typeof import("http").ServerResponse> | undefined;
    logger: Logger;
};
