"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createLogger = void 0;
const util_1 = require("util");
const triple_beam_1 = require("triple-beam");
const winston_1 = __importDefault(require("winston"));
const { combine, colorize, timestamp: useTimestamp, printf } = winston_1.default.format;
function createLogger(loggerConfig) {
    const prettyPrint = (meta) => {
        const { [triple_beam_1.LEVEL]: noLevel, [triple_beam_1.MESSAGE]: noMessage, [triple_beam_1.SPLAT]: noSplat, ...rest } = meta;
        return (0, util_1.inspect)(rest, false, 1, loggerConfig.color);
    };
    const getOutputFormat = (isPretty) => printf(({ timestamp, message, level, durationMs, ...meta }) => {
        if (typeof message === "object") {
            meta = { ...meta, ...message };
            message = "[No message]";
        }
        return (`${timestamp} ${level}: ${message}` +
            (durationMs === undefined ? "" : ` duration: ${durationMs}ms`) +
            (Object.keys(meta).length === 0
                ? ""
                : " " + (isPretty ? prettyPrint(meta) : JSON.stringify(meta))));
    });
    const formats = [useTimestamp()];
    const consoleOutputOptions = {
        handleExceptions: true,
    };
    if (loggerConfig.color) {
        formats.push(colorize());
    }
    switch (loggerConfig.level) {
        case "debug":
            consoleOutputOptions.level = "debug";
            formats.push(getOutputFormat(true));
            break;
        case "silent":
        case "warn":
        default:
            consoleOutputOptions.level = "warn";
            formats.push(getOutputFormat());
    }
    consoleOutputOptions.format = combine(...formats);
    return winston_1.default.createLogger({
        silent: loggerConfig.level === "silent",
        levels: winston_1.default.config.npm.levels,
        transports: [new winston_1.default.transports.Console(consoleOutputOptions)],
        exitOnError: false,
    });
}
exports.createLogger = createLogger;
//# sourceMappingURL=logger.js.map