import { Request, Response } from "express";
import { Logger } from "winston";
import { z } from "zod";
import { ApiResponse } from "./api-response";
import { ResultHandlerError } from "./errors";
import { IOSchema } from "./io-schema";
interface LastResortHandlerParams {
    error: ResultHandlerError;
    logger: Logger;
    response: Response;
}
interface ResultHandlerParams<RES> {
    error: Error | null;
    input: any;
    output: any;
    request: Request;
    response: Response<RES>;
    logger: Logger;
}
type ResultHandler<RES> = (params: ResultHandlerParams<RES>) => void | Promise<void>;
export interface ResultHandlerDefinition<POS extends ApiResponse, NEG extends ApiResponse> {
    getPositiveResponse: (output: IOSchema) => POS;
    getNegativeResponse: () => NEG;
    handler: ResultHandler<z.output<POS["schema"]> | z.output<NEG["schema"]>>;
}
export declare const createResultHandler: <POS extends ApiResponse<z.ZodTypeAny>, NEG extends ApiResponse<z.ZodTypeAny>>(definition: ResultHandlerDefinition<POS, NEG>) => ResultHandlerDefinition<POS, NEG>;
export declare const defaultResultHandler: ResultHandlerDefinition<ApiResponse<z.ZodObject<{
    status: z.ZodLiteral<"success">;
    data: IOSchema<any>;
}, "strip", z.ZodTypeAny, {
    data?: unknown;
    status: "success";
}, {
    data?: unknown;
    status: "success";
}> & {
    keyof: () => z.ZodEnum<never>;
} & {
    _def: z.ZodObjectDef<{
        status: z.ZodLiteral<"success">;
        data: IOSchema<any>;
    }, "strip", z.ZodTypeAny> & import("./metadata").MetaDef<z.ZodObject<{
        status: z.ZodLiteral<"success">;
        data: IOSchema<any>;
    }, "strip", z.ZodTypeAny, {
        data?: unknown;
        status: "success";
    }, {
        data?: unknown;
        status: "success";
    }>>;
    example: (example: {
        data?: unknown;
        status: "success";
    }) => z.ZodObject<{
        status: z.ZodLiteral<"success">;
        data: IOSchema<any>;
    }, "strip", z.ZodTypeAny, {
        data?: unknown;
        status: "success";
    }, {
        data?: unknown;
        status: "success";
    }> & {
        keyof: () => z.ZodEnum<never>;
    } & any;
}>, ApiResponse<z.ZodObject<{
    status: z.ZodLiteral<"error">;
    error: z.ZodObject<{
        message: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        message: string;
    }, {
        message: string;
    }>;
}, "strip", z.ZodTypeAny, {
    status: "error";
    error: {
        message: string;
    };
}, {
    status: "error";
    error: {
        message: string;
    };
}> & {
    keyof: () => z.ZodEnum<never>;
} & {
    _def: z.ZodObjectDef<{
        status: z.ZodLiteral<"error">;
        error: z.ZodObject<{
            message: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            message: string;
        }, {
            message: string;
        }>;
    }, "strip", z.ZodTypeAny> & import("./metadata").MetaDef<z.ZodObject<{
        status: z.ZodLiteral<"error">;
        error: z.ZodObject<{
            message: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            message: string;
        }, {
            message: string;
        }>;
    }, "strip", z.ZodTypeAny, {
        status: "error";
        error: {
            message: string;
        };
    }, {
        status: "error";
        error: {
            message: string;
        };
    }>>;
    example: (example: {
        status: "error";
        error: {
            message: string;
        };
    }) => z.ZodObject<{
        status: z.ZodLiteral<"error">;
        error: z.ZodObject<{
            message: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            message: string;
        }, {
            message: string;
        }>;
    }, "strip", z.ZodTypeAny, {
        status: "error";
        error: {
            message: string;
        };
    }, {
        status: "error";
        error: {
            message: string;
        };
    }> & {
        keyof: () => z.ZodEnum<never>;
    } & any;
}>>;
export declare const lastResortHandler: ({ error, logger, response, }: LastResortHandlerParams) => void;
export {};
