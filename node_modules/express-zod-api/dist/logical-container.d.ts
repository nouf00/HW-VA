type LogicalOr<T> = {
    or: T[];
};
type LogicalAnd<T> = {
    and: T[];
};
export type LogicalContainer<T> = LogicalOr<T | LogicalAnd<T>> | LogicalAnd<T | LogicalOr<T>> | T;
/** @desc combines several LogicalAnds into a one */
export declare const flattenAnds: <T>(subject: (T | LogicalAnd<T>)[]) => LogicalAnd<T>;
/** @desc creates a LogicalContainer out of another one */
export declare const mapLogicalContainer: <T, S>(container: LogicalContainer<T>, fn: (subject: T) => S) => LogicalContainer<S>;
/** @desc converts LogicalAnd into LogicalOr */
export declare const andToOr: <T>(subject: LogicalAnd<T | LogicalOr<T>>) => LogicalOr<T | LogicalAnd<T>>;
/** @desc reducer, combines two LogicalContainers */
export declare const combineContainers: <T>(a: LogicalContainer<T>, b: LogicalContainer<T>) => LogicalContainer<T>;
export {};
