import { Request } from "express";
import { z } from "zod";
import { CommonConfig, InputSources, LoggerConfig } from "./config-type";
import { IOSchema } from "./io-schema";
import { Method } from "./method";
export type FlatObject = Record<string, any>;
export type ArrayElement<T extends readonly unknown[]> = T extends readonly (infer K)[] ? K : never;
/** @see https://expressjs.com/en/guide/routing.html */
export declare const routePathParamsRegex: RegExp;
export declare const defaultInputSources: InputSources;
export declare const getActualMethod: (request: Request) => Method | "options";
export declare function getInput(request: Request, inputAssignment: CommonConfig["inputSources"]): any;
export declare function isLoggerConfig(logger: any): logger is LoggerConfig;
export declare function isValidDate(date: Date): boolean;
export declare function makeErrorFromAnything<T extends Error>(subject: T): T;
export declare function makeErrorFromAnything(subject: any): Error;
export declare function getMessageFromError(error: Error): string;
export declare function getStatusCodeFromError(error: Error): number;
type Examples<T extends z.ZodTypeAny> = Readonly<z.input<T>[] | z.output<T>[]>;
export declare const getExamples: <T extends z.ZodTypeAny>(schema: T, parseToOutput: boolean) => Examples<T>;
export declare const combinations: <T extends unknown>(a: T[], b: T[]) => {
    type: "single";
    value: T[];
} | {
    type: "tuple";
    value: [T, T][];
};
export declare function getRoutePathParams(path: string): string[];
export declare function hasTopLevelTransformingEffect(schema: IOSchema): boolean;
export declare function hasUpload(schema: z.ZodTypeAny): boolean;
export type ErrMessage = Exclude<Parameters<typeof z.ZodString.prototype.email>[0], undefined>;
export declare const errToObj: (message: ErrMessage | undefined) => {
    message?: string | undefined;
};
export {};
