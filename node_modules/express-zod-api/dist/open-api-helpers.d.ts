import { MediaTypeObject, ParameterObject, RequestBodyObject, ResponseObject, SchemaObject, SecurityRequirementObject, SecuritySchemeObject, TagObject } from "openapi3-ts";
import { z } from "zod";
import { InputSources, TagsConfig } from "./config-type";
import { ZodDateIn } from "./date-in-schema";
import { ZodDateOut } from "./date-out-schema";
import { AbstractEndpoint } from "./endpoint";
import { ZodFile } from "./file-schema";
import { IOSchema } from "./io-schema";
import { LogicalContainer } from "./logical-container";
import { Method } from "./method";
import { Security } from "./security";
import { ZodUpload } from "./upload-schema";
type MediaExamples = Pick<MediaTypeObject, "examples">;
type DepictHelper<T extends z.ZodType<any>> = (params: {
    schema: T;
    initial?: SchemaObject;
    isResponse: boolean;
}) => SchemaObject;
interface ReqResDepictHelperCommonProps {
    method: Method;
    path: string;
    endpoint: AbstractEndpoint;
}
export declare const reformatParamsInPath: (path: string) => string;
export declare const depictDefault: DepictHelper<z.ZodDefault<z.ZodTypeAny>>;
export declare const depictAny: DepictHelper<z.ZodAny>;
export declare const depictUpload: DepictHelper<ZodUpload>;
export declare const depictFile: DepictHelper<ZodFile>;
export declare const depictUnion: DepictHelper<z.ZodUnion<[z.ZodTypeAny, ...z.ZodTypeAny[]]>>;
export declare const depictDiscriminatedUnion: DepictHelper<z.ZodDiscriminatedUnion<string, z.Primitive, z.ZodObject<any>>>;
export declare const depictIntersection: DepictHelper<z.ZodIntersection<z.ZodTypeAny, z.ZodTypeAny>>;
export declare const depictOptionalOrNullable: DepictHelper<z.ZodOptional<any> | z.ZodNullable<any>>;
export declare const depictEnum: DepictHelper<z.ZodEnum<any> | z.ZodNativeEnum<any>>;
export declare const depictLiteral: DepictHelper<z.ZodLiteral<any>>;
export declare const depictObject: DepictHelper<z.AnyZodObject>;
/** @see https://swagger.io/docs/specification/data-models/data-types/ */
export declare const depictNull: DepictHelper<z.ZodNull>;
export declare const depictDateIn: DepictHelper<ZodDateIn>;
export declare const depictDateOut: DepictHelper<ZodDateOut>;
/** @throws OpenAPIError */
export declare const depictZodDate: DepictHelper<z.ZodDate>;
export declare const depictBoolean: DepictHelper<z.ZodBoolean>;
export declare const depictBigInt: DepictHelper<z.ZodBigInt>;
export declare const depictRecord: DepictHelper<z.ZodRecord<z.ZodTypeAny>>;
export declare const depictArray: DepictHelper<z.ZodArray<z.ZodTypeAny>>;
/** @todo improve it when OpenAPI 3.1.0 will be released */
export declare const depictTuple: DepictHelper<z.ZodTuple>;
export declare const depictString: DepictHelper<z.ZodString>;
/** @todo support exclusive min/max as numbers in case of OpenAPI v3.1.x */
export declare const depictNumber: DepictHelper<z.ZodNumber>;
export declare const depictObjectProperties: ({ schema: { shape }, isResponse, }: Parameters<DepictHelper<z.AnyZodObject>>[0]) => Record<string, SchemaObject>;
export declare const depictEffect: DepictHelper<z.ZodEffects<z.ZodTypeAny>>;
export declare const depictZodBranded: DepictHelper<z.ZodBranded<z.ZodTypeAny, any>>;
export declare const depictIOExamples: <T extends IOSchema<any>>(schema: T, isResponse: boolean, omitProps?: string[]) => MediaExamples;
export declare const depictIOParamExamples: <T extends IOSchema<any>>(schema: T, isResponse: boolean, param: string) => MediaExamples;
export declare function extractObjectSchema(subject: IOSchema): z.AnyZodObject | (z.AnyZodObject & {
    keyof: () => z.ZodEnum<never>;
} & {
    _def: z.ZodObjectDef<any, any, any> & import("./metadata").MetaDef<z.AnyZodObject>;
    example: (example: {
        [x: string]: any;
    }) => z.AnyZodObject & {
        keyof: () => z.ZodEnum<never>;
    } & any;
});
export declare const depictRequestParams: ({ path, method, endpoint, inputSources, }: ReqResDepictHelperCommonProps & {
    inputSources: InputSources[Method];
}) => ParameterObject[];
export declare const depictSchema: DepictHelper<z.ZodTypeAny>;
export declare const excludeParamsFromDepiction: (depicted: SchemaObject, pathParams: string[]) => SchemaObject;
export declare const excludeExampleFromDepiction: (depicted: SchemaObject) => SchemaObject;
export declare const depictResponse: ({ method, path, description, endpoint, isPositive, }: ReqResDepictHelperCommonProps & {
    description: string;
    isPositive: boolean;
}) => ResponseObject;
export declare const depictSecurity: (container: LogicalContainer<Security>) => LogicalContainer<SecuritySchemeObject>;
export declare const depictSecurityRefs: (container: LogicalContainer<{
    name: string;
    scopes: string[];
}>) => SecurityRequirementObject[];
export declare const depictRequest: ({ method, path, endpoint, }: ReqResDepictHelperCommonProps) => RequestBodyObject;
export declare const depictTags: <TAG extends string>(tags: TagsConfig<TAG>) => TagObject[];
export declare const ensureShortDescription: (description: string) => string;
export {};
