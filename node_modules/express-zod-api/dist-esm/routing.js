import { DependsOnMethod } from "./depends-on-method.js";
import { AbstractEndpoint } from "./endpoint.js";
import { RoutingError } from "./errors.js";
import { ServeStatic } from "./serve-static.js";
import { getStartupLogo } from "./startup-logo.js";
export const routingCycle = ({ routing, endpointCb, staticCb, parentPath, hasCors, }) => {
    Object.entries(routing).forEach(([segment, element]) => {
        segment = segment.trim();
        if (segment.match(/\//)) {
            throw new RoutingError("Routing elements should not contain '/' character.\n" +
                `The error caused by ${parentPath
                    ? `'${parentPath}' route that has a '${segment}'`
                    : `'${segment}'`} entry.`);
        }
        const path = `${parentPath || ""}${segment ? `/${segment}` : ""}`;
        if (element instanceof AbstractEndpoint) {
            const methods = element.getMethods().slice();
            if (hasCors) {
                methods.push("options");
            }
            methods.forEach((method) => {
                endpointCb(element, path, method);
            });
        }
        else if (element instanceof ServeStatic) {
            if (staticCb) {
                element.apply(path, staticCb);
            }
        }
        else if (element instanceof DependsOnMethod) {
            Object.entries(element.methods).forEach(([method, endpoint]) => {
                endpointCb(endpoint, path, method);
            });
            if (hasCors && Object.keys(element.methods).length > 0) {
                const firstEndpoint = Object.values(element.methods)[0];
                endpointCb(firstEndpoint, path, "options");
            }
        }
        else {
            routingCycle({
                routing: element,
                endpointCb,
                staticCb,
                hasCors: hasCors,
                parentPath: path,
            });
        }
    });
};
export const initRouting = ({ app, logger, config, routing, }) => {
    if (config.startupLogo !== false) {
        console.log(getStartupLogo());
    }
    routingCycle({
        routing,
        hasCors: !!config.cors,
        endpointCb: (endpoint, path, method) => {
            app[method](path, async (request, response) => {
                logger.info(`${request.method}: ${path}`);
                await endpoint.execute({ request, response, logger, config });
            });
        },
        staticCb: (path, handler) => {
            app.use(path, handler);
        },
    });
};
//# sourceMappingURL=routing.js.map