var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _a, _EndpointsFactory_create;
import { z } from "zod";
import { hasUpload } from "./common-helpers.js";
import { Endpoint } from "./endpoint.js";
import { getFinalEndpointInputSchema, } from "./io-schema.js";
import { createMiddleware, } from "./middleware.js";
import { mimeJson, mimeMultipart } from "./mime.js";
import { defaultResultHandler, } from "./result-handler.js";
export class EndpointsFactory {
    constructor(subject) {
        this.middlewares = [];
        this.use = this.addExpressMiddleware;
        this.resultHandler =
            "resultHandler" in subject ? subject.resultHandler : subject;
    }
    addMiddleware(subject) {
        return __classPrivateFieldGet(EndpointsFactory, _a, "m", _EndpointsFactory_create).call(EndpointsFactory, this.middlewares.concat(subject), this.resultHandler);
    }
    addExpressMiddleware(middleware, features) {
        const transformer = features?.transformer || ((err) => err);
        const provider = features?.provider || (() => ({}));
        const definition = {
            type: "express",
            input: z.object({}),
            middleware: async ({ request, response }) => new Promise((resolve, reject) => {
                const next = (err) => {
                    if (err && err instanceof Error) {
                        return reject(transformer(err));
                    }
                    resolve(provider(request, response));
                };
                middleware(request, response, next);
            }),
        };
        return __classPrivateFieldGet(EndpointsFactory, _a, "m", _EndpointsFactory_create).call(EndpointsFactory, this.middlewares.concat(definition), this.resultHandler);
    }
    addOptions(options) {
        return __classPrivateFieldGet(EndpointsFactory, _a, "m", _EndpointsFactory_create).call(EndpointsFactory, this.middlewares.concat(createMiddleware({
            input: z.object({}),
            middleware: async () => options,
        })), this.resultHandler);
    }
    build({ input, handler, output: outputSchema, ...rest }) {
        const { middlewares, resultHandler } = this;
        return new Endpoint({
            handler,
            middlewares,
            outputSchema,
            resultHandler,
            inputSchema: getFinalEndpointInputSchema(middlewares, input),
            mimeTypes: hasUpload(input) ? [mimeMultipart] : [mimeJson],
            ...rest,
        });
    }
}
_a = EndpointsFactory, _EndpointsFactory_create = function _EndpointsFactory_create(middlewares, resultHandler) {
    const factory = new EndpointsFactory(resultHandler);
    factory.middlewares = middlewares;
    return factory;
};
export const defaultEndpointsFactory = new EndpointsFactory(defaultResultHandler);
//# sourceMappingURL=endpoints-factory.js.map