import { INVALID, ZodIssueCode, ZodParsedType, ZodType, addIssueToContext, } from "zod";
import { errToObj } from "./common-helpers.js";
const zodFileKind = "ZodFile";
const base64Regex = /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/;
export class ZodFile extends ZodType {
    constructor() {
        super(...arguments);
        this.binary = (message) => new ZodFile({
            ...this._def,
            checks: [...this._def.checks, { kind: "binary", ...errToObj(message) }],
        });
        this.base64 = (message) => new ZodFile({
            ...this._def,
            checks: [...this._def.checks, { kind: "base64", ...errToObj(message) }],
        });
    }
    _parse(input) {
        const { status, ctx } = this._processInputParams(input);
        if (ctx.parsedType !== ZodParsedType.string) {
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.string,
                received: ctx.parsedType,
            });
            return INVALID;
        }
        for (const check of this._def.checks) {
            if (check.kind === "base64") {
                if (!base64Regex.test(ctx.data)) {
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.custom,
                        message: check.message,
                    });
                    status.dirty();
                }
            }
        }
        return { status: status.value, value: ctx.data };
    }
    get isBinary() {
        return !!this._def.checks.find((check) => check.kind === "binary");
    }
    get isBase64() {
        return !!this._def.checks.find((check) => check.kind === "base64");
    }
}
ZodFile.create = () => new ZodFile({
    checks: [],
    typeName: zodFileKind,
});
//# sourceMappingURL=file-schema.js.map