import { z } from "zod";
import { createApiResponse } from "./api-response.js";
import { getMessageFromError, getStatusCodeFromError } from "./common-helpers.js";
import { getMeta, withMeta } from "./metadata.js";
export const createResultHandler = (definition) => definition;
export const defaultResultHandler = createResultHandler({
    getPositiveResponse: (output) => {
        const examples = getMeta(output, "examples") || [];
        const responseSchema = withMeta(z.object({
            status: z.literal("success"),
            data: output,
        }));
        for (const example of examples) {
            // forwarding output examples to response schema
            responseSchema.example({
                status: "success",
                data: example,
            });
        }
        return createApiResponse(responseSchema);
    },
    getNegativeResponse: () => {
        const responseSchema = withMeta(z.object({
            status: z.literal("error"),
            error: z.object({
                message: z.string(),
            }),
        })).example({
            status: "error",
            error: {
                message: getMessageFromError(new Error("Sample error message")),
            },
        });
        return createApiResponse(responseSchema);
    },
    handler: ({ error, input, output, request, response, logger }) => {
        if (!error) {
            response.status(200).json({
                status: "success",
                data: output,
            });
            return;
        }
        const statusCode = getStatusCodeFromError(error);
        if (statusCode === 500) {
            logger.error(`Internal server error\n${error.stack}\n`, {
                url: request.url,
                payload: input,
            });
        }
        response.status(statusCode).json({
            status: "error",
            error: { message: getMessageFromError(error) },
        });
    },
});
export const lastResortHandler = ({ error, logger, response, }) => {
    logger.error(`Result handler failure: ${error.message}.`);
    response
        .status(500)
        .end(`An error occurred while serving the result: ${error.message}.` +
        (error.hasOriginalError()
            ? `\nOriginal error: ${error.getOriginalErrorMessage()}.`
            : ""));
};
//# sourceMappingURL=result-handler.js.map