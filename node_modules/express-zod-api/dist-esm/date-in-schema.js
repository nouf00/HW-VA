import { INVALID, ZodIssueCode, ZodParsedType, ZodType, addIssueToContext, } from "zod";
import { isValidDate } from "./common-helpers.js";
// simple regex for ISO date, supports the following formats:
// 2021-01-01T00:00:00.000Z
// 2021-01-01T00:00:00Z
// 2021-01-01T00:00:00
// 2021-01-01
export const isoDateRegex = /^\d{4}-\d{2}-\d{2}(T\d{2}:\d{2}:\d{2}(\.\d{3})?)?Z?$/;
const zodDateInKind = "ZodDateIn";
export class ZodDateIn extends ZodType {
    _parse(input) {
        const { status, ctx } = this._processInputParams(input);
        if (ctx.parsedType !== ZodParsedType.string) {
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.string,
                received: ctx.parsedType,
            });
            return INVALID;
        }
        if (!isoDateRegex.test(ctx.data)) {
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_string,
                validation: "regex",
            });
            status.dirty();
        }
        const date = new Date(ctx.data);
        if (!isValidDate(date)) {
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_date,
            });
            return INVALID;
        }
        return { status: status.value, value: date };
    }
}
ZodDateIn.create = () => new ZodDateIn({
    typeName: zodDateInKind,
});
//# sourceMappingURL=date-in-schema.js.map