import { INVALID, ZodIssueCode, ZodParsedType, ZodType, addIssueToContext, } from "zod";
import { isValidDate } from "./common-helpers.js";
const zodDateOutKind = "ZodDateOut";
export class ZodDateOut extends ZodType {
    _parse(input) {
        const { status, ctx } = this._processInputParams(input);
        if (ctx.parsedType !== ZodParsedType.date) {
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.date,
                received: ctx.parsedType,
            });
            return INVALID;
        }
        if (!isValidDate(ctx.data)) {
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_date,
            });
            return INVALID;
        }
        return { status: status.value, value: ctx.data.toISOString() };
    }
}
ZodDateOut.create = () => new ZodDateOut({
    typeName: zodDateOutKind,
});
//# sourceMappingURL=date-out-schema.js.map